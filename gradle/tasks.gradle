configurations {
    kotlinRuntime
}

dependencies {
    kotlinRuntime "org.jetbrains.kotlin:kotlin-runtime:$kotlin_version"
}

def kotlinClassPath = configurations.kotlinRuntime + sourceSets.main.runtimeClasspath

task emptyProgram(type: JavaExec) {
    classpath kotlinClassPath
    main = 'EmptyProgramKt'
}

task helloWorld(type: JavaExec) {
    classpath kotlinClassPath
    main = 'HelloWorldKt'
}

task vars(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VarsKt'
}

task mutableVariable(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutableVariableKt'
}

task vals(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ValsKt'
}

task stringPlusNumber(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringPlusNumberKt'
}

task types(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TypesKt'
}

task inference(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InferenceKt'
}

task multiplyByTwo(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultiplyByTwoKt'
}

task sayHello(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SayHelloKt'
}

task multiplyByThree(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultiplyByThreeKt'
}

task multiplyByFour(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultiplyByFourKt'
}

task if1(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If1Kt'
}

task if2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If2Kt'
}

task if3(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If3Kt'
}

task if4(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If4Kt'
}

task if5(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If5Kt'
}

task if6(type: JavaExec) {
    classpath kotlinClassPath
    main = 'If6Kt'
}

task trueOrFalse(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TrueOrFalseKt'
}

task oneOrTheOther(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OneOrTheOtherKt'
}

task stringTemplates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringTemplatesKt'
}

task stringConcatenation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringConcatenationKt'
}

task expressionInStringTemplate(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ExpressionInStringTemplateKt'
}

task tripleQuotes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TripleQuotesKt'
}

task inferInt(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InferIntKt'
}

task modulus(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ModulusKt'
}

task intDivisionTruncates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntDivisionTruncatesKt'
}

task bMI(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BMIKt'
}

task integerMath(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntegerMathKt'
}

task integerOverflow(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntegerOverflowKt'
}

task usingLongs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UsingLongsKt'
}

task biggestLong(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BiggestLongKt'
}

task booleans1(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Booleans1Kt'
}

task booleans2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Booleans2Kt'
}

task booleans3(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Booleans3Kt'
}

task evaluationOrder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'EvaluationOrderKt'
}

task whileLoop(type: JavaExec) {
    classpath kotlinClassPath
    main = 'WhileLoopKt'
}

task doWhileLoop(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DoWhileLoopKt'
}

task repeatThreeTimes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RepeatThreeTimesKt'
}

task definingRanges(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DefiningRangesKt'
}

task sumUsingRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SumUsingRangeKt'
}

task forWithRanges(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ForWithRangesKt'
}

task forWithCharRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ForWithCharRangeKt'
}

task indexIntoString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IndexIntoStringKt'
}

task addingIntToChar(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AddingIntToCharKt'
}

task iterateOverString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IterateOverStringKt'
}

task containsChar(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ContainsCharKt'
}

task membershipInRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MembershipInRangeKt'
}

task membershipUsingBounds(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MembershipUsingBoundsKt'
}

task iterationVsMembership(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IterationVsMembershipKt'
}

task inString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InStringKt'
}

task charRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CharRangeKt'
}

task floatingPointRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FloatingPointRangeKt'
}

task stringRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StringRangeKt'
}

task forLoopIsAStatement(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ForLoopIsAStatementKt'
}

task unitReturnType(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UnitReturnTypeKt'
}

task assigningAnIf(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AssigningAnIfKt'
}

task basicFunctions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BasicFunctionsKt'
}

task booleans(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BooleansKt'
}

task ifResult(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IfResultKt'
}

task ifExpression(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IfExpressionKt'
}

task strTemplates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StrTemplatesKt'
}

task threeQuotes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ThreeQuotesKt'
}

task numberTypes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NumberTypesKt'
}

task overflow(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OverflowKt'
}

task truncation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TruncationKt'
}

task iterateThroughString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IterateThroughStringKt'
}

task intRange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntRangeKt'
}

task rangeMembership(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RangeMembershipKt'
}

task intRanges(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IntRangesKt'
}

task rangeSum(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RangeSumKt'
}

task animals(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AnimalsKt'
}

task dog(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DogKt'
}

task cat(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CatKt'
}

task hamster(type: JavaExec) {
    classpath kotlinClassPath
    main = 'HamsterKt'
}

task importClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportClassKt'
}

task importMultiple(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportMultipleKt'
}

task importNameChange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportNameChangeKt'
}

task importEverything(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportEverythingKt'
}

task fullyQualify(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FullyQualifyKt'
}

task importPythagorean(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ImportPythagoreanKt'
}

task testingExample(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TestingExampleKt'
}

task tDDFail(type: JavaExec) {
    classpath kotlinClassPath
    main = 'testing1.TDDFailKt'
}

task tDDStillFails(type: JavaExec) {
    classpath kotlinClassPath
    main = 'testing2.TDDStillFailsKt'
}

task tDDWorks(type: JavaExec) {
    classpath kotlinClassPath
    main = 'testing3.TDDWorksKt'
}

task cup(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CupKt'
}

task cup2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'Cup2Kt'
}

task changingAVal(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ChangingAValKt'
}

task anUnchangingVar(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AnUnchangingVarKt'
}

task references(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReferencesKt'
}

task lists(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ListsKt'
}

task parameterizedTypes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ParameterizedTypesKt'
}

task parameterizedReturnTypes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ParameterizedReturnTypesKt'
}

task mutableList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutableListKt'
}

task mutableListIsList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutableListIsListKt'
}

task differentReferencesToList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DifferentReferencesToListKt'
}

task useALibrary(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UseALibraryKt'
}

task usingAtomicTest(type: JavaExec) {
    classpath kotlinClassPath
    main = 'UsingAtomicTestKt'
}

task listCollection(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ListCollectionKt'
}

task classBodies(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ClassBodiesKt'
}

task temperature(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TemperatureKt'
}

task ticTacToe(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TicTacToeKt'
}

task observeAnimals(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ObserveAnimalsKt'
}

task cookie(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CookieKt'
}

task whenExpressions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'WhenExpressionsKt'
}

task whenExpressionAndSmartCasts(type: JavaExec) {
    classpath kotlinClassPath
    main = 'whenexpressionscasts.WhenExpressionAndSmartCastsKt'
}

task namedArguments(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NamedArgumentsKt'
}

task namedArgumentsOrder(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NamedArgumentsOrderKt'
}

task namedAndDefaultArgs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NamedAndDefaultArgsKt'
}

task overloading(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OverloadingKt'
}

task overloadingAdd(type: JavaExec) {
    classpath kotlinClassPath
    main = 'OverloadingAddKt'
}

task withoutDefaultArguments(type: JavaExec) {
    classpath kotlinClassPath
    main = 'WithoutDefaultArgumentsKt'
}

task withDefaultArguments(type: JavaExec) {
    classpath kotlinClassPath
    main = 'WithDefaultArgumentsKt'
}

task classArg(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ClassArgKt'
}

task visibleClassArgs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VisibleClassArgsKt'
}

task multipleClassArgs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MultipleClassArgsKt'
}

task initSection(type: JavaExec) {
    classpath kotlinClassPath
    main = 'constructors.InitSectionKt'
}

task coffee(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CoffeeKt'
}

task gardenGnome(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GardenGnomeKt'
}

task dataClasses(type: JavaExec) {
    classpath kotlinClassPath
    main = 'dataclasses.DataClassesKt'
}

task copyDataClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CopyDataClassKt'
}

task bicycle(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BicycleKt'
}

task surrey(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SurreyKt'
}

task surreyWithToString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SurreyWithToStringKt'
}

task sets(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SetsKt'
}

task removeDuplicates(type: JavaExec) {
    classpath kotlinClassPath
    main = 'RemoveDuplicatesKt'
}

task mutableSet(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutableSetKt'
}

task maps(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MapsKt'
}

task mutableMaps(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MutableMapsKt'
}

task readOnlyMaps(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReadOnlyMapsKt'
}

task contactMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ContactMapKt'
}

task pairs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'PairsKt'
}

task pairsAndDesctructuring(type: JavaExec) {
    classpath kotlinClassPath
    main = 'PairsAndDesctructuringKt'
}

task computationResult(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ComputationResultKt'
}

task tuple(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TupleKt'
}

task destructuringAndForLoop(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DestructuringAndForLoopKt'
}

task quoting(type: JavaExec) {
    classpath kotlinClassPath
    main = 'quoting.QuotingKt'
}

task quote(type: JavaExec) {
    classpath kotlinClassPath
    main = 'quoting.QuoteKt'
}

task strangeQuote(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StrangeQuoteKt'
}

task memberVsExtension(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MemberVsExtensionKt'
}

task bookExtensions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'BookExtensionsKt'
}

task localFunctions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LocalFunctionsKt'
}

task localExtensions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LocalExtensionsKt'
}

task nullInMaps(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NullInMapsKt'
}

task nullableAndNonnullTypes(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NullableAndNonnullTypesKt'
}

task dereference(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DereferenceKt'
}

task explicitCheck(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ExplicitCheckKt'
}

task dereferenceNull(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DereferenceNullKt'
}

task safeCall(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SafeCallKt'
}

task chainedSafeCalls(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ChainedSafeCallsKt'
}

task elvisOperator(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ElvisOperatorKt'
}

task nonNullAssertedCalls(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NonNullAssertedCallsKt'
}

task nonNullAssertion(type: JavaExec) {
    classpath kotlinClassPath
    main = 'NonNullAssertionKt'
}

task gettingValueFromMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GettingValueFromMapKt'
}

task extensionsOnNullableString(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ExtensionsOnNullableStringKt'
}

task declarations(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DeclarationsKt'
}

task displayList(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DisplayListKt'
}

task displayListWithLambda(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DisplayListWithLambdaKt'
}

task displayDuck(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DisplayDuckKt'
}

task displayDuckTestable(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DisplayDuckTestableKt'
}

task twoArgAnonymous(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TwoArgAnonymousKt'
}

task callLater(type: JavaExec) {
    classpath kotlinClassPath
    main = 'CallLaterKt'
}

task assignAnonymous(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AssignAnonymousKt'
}

task simpleMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SimpleMapKt'
}

task sum(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SumKt'
}

task reduce(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ReduceKt'
}

task moreReduce(type: JavaExec) {
    classpath kotlinClassPath
    main = 'MoreReduceKt'
}

task zipper(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ZipperKt'
}

task indexWithZip(type: JavaExec) {
    classpath kotlinClassPath
    main = 'IndexWithZipKt'
}

task zipMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'combininglistswithzip.ZipMapKt'
}

task listOf(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ListOfKt'
}

task variableArgLists(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VariableArgListsKt'
}

task varargSum(type: JavaExec) {
    classpath kotlinClassPath
    main = 'VarargSumKt'
}

task spreadOperator(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SpreadOperatorKt'
}

task twoFunctionsWithVarargs(type: JavaExec) {
    classpath kotlinClassPath
    main = 'TwoFunctionsWithVarargsKt'
}

task greatApe(type: JavaExec) {
    classpath kotlinClassPath
    main = 'inheritance.GreatApeKt'
}

task greatApe2(type: JavaExec) {
    classpath kotlinClassPath
    main = 'baseclassinit.GreatApe2Kt'
}

task auxiliaryInitialization(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AuxiliaryInitializationKt'
}

task callingOtherConstructors(type: JavaExec) {
    classpath kotlinClassPath
    main = 'baseclassinit.CallingOtherConstructorsKt'
}

task greatApe3(type: JavaExec) {
    classpath kotlinClassPath
    main = 'GreatApe3Kt'
}

task abstractClasses(type: JavaExec) {
    classpath kotlinClassPath
    main = 'abstractClasses.AbstractClassesKt'
}

task stateOfAClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'StateOfAClassKt'
}

task interfaceMemberImplementations(type: JavaExec) {
    classpath kotlinClassPath
    main = 'interfaces3.InterfaceMemberImplementationsKt'
}

task framework(type: JavaExec) {
    classpath kotlinClassPath
    main = 'FrameworkKt'
}

task interfaceCollision(type: JavaExec) {
    classpath kotlinClassPath
    main = 'InterfaceCollisionKt'
}

task myClass(type: JavaExec) {
    classpath kotlinClassPath
    main = 'propertyaccessors.MyClassKt'
}

task defaultAccessors(type: JavaExec) {
    classpath kotlinClassPath
    main = 'DefaultAccessorsKt'
}

task loggingChange(type: JavaExec) {
    classpath kotlinClassPath
    main = 'LoggingChangeKt'
}

task hamsters(type: JavaExec) {
    classpath kotlinClassPath
    main = 'propertyaccessors.HamstersKt'
}

task propertyInInterface(type: JavaExec) {
    classpath kotlinClassPath
    main = 'propertyaccessors.PropertyInInterfaceKt'
}

task explicitDelegation(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ExplicitDelegationKt'
}

task adjustedControls(type: JavaExec) {
    classpath kotlinClassPath
    main = 'AdjustedControlsKt'
}

task modelingMultipleInheritance(type: JavaExec) {
    classpath kotlinClassPath
    main = 'ModelingMultipleInheritanceKt'
}

task level(type: JavaExec) {
    classpath kotlinClassPath
    main = 'enumerations.LevelKt'
}

task importLevel(type: JavaExec) {
    classpath kotlinClassPath
    main = 'enumerations.ImportLevelKt'
}

task colorBlendTest(type: JavaExec) {
    classpath kotlinClassPath
    main = 'colorblend.ColorBlendTestKt'
}

task colorBlendMap(type: JavaExec) {
    classpath kotlinClassPath
    main = 'colorblendmap.ColorBlendMapKt'
}

task regularClasses(type: JavaExec) {
    classpath kotlinClassPath
    main = 'regularClasses.RegularClassesKt'
}

task sealedClasses(type: JavaExec) {
    classpath kotlinClassPath
    main = 'SealedClassesKt'
}

task objectsAndFunctions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'companionobjects.ObjectsAndFunctionsKt'
}

task thisKeyword(type: JavaExec) {
    classpath kotlinClassPath
    main = 'companionobjects1.ThisKeywordKt'
}

task objectKeyword(type: JavaExec) {
    classpath kotlinClassPath
    main = 'companionobjects2.ObjectKeywordKt'
}

task objectProperty(type: JavaExec) {
    classpath kotlinClassPath
    main = 'companionobjects4.ObjectPropertyKt'
}

task objectFunctions(type: JavaExec) {
    classpath kotlinClassPath
    main = 'companionobjects5.ObjectFunctionsKt'
}

task objCounter(type: JavaExec) {
    classpath kotlinClassPath
    main = 'companionobjects.ObjCounterKt'
}

task dataClassesWithVars(type: JavaExec) {
    classpath kotlinClassPath
    main = 'dataclasses3.DataClassesWithVarsKt'
}

task dataClassAndHashCode(type: JavaExec) {
    classpath kotlinClassPath
    main = 'dataclasses4.DataClassAndHashCodeKt'
}
